I - Convention d'indentation
---------------------------

	L'indentation sera faite à l'aide d'espaces
	Le nombre d'espaces sera de 4.
	
II - Convention de variable
---------------------------

	Les variables globales auront comme préfixe : GL_ ex: GL_MaVariableGlobale
	Les constantes seront définit comme lui : MA_VARIABLE
	Les variables de base seront de la forme : type maVariable
		Si plusieurs variables sont du même type alors elles seront présentes sur la même ligne : int maVariable, MonAutre, etc;
	

III - Convention de code & commentaire
--------------------------------------

	Le code sera ecrit en anglais
	Les accolades seront placées en fin de ligne avec la forme suivante ( exemple du if ) 
		if ( i == 20 ) {
	Les accolades seront OBLIGATOIRES même si le code ne comporte qu'une seule instruction
	Les maccros comporteront toujours un : ( pour éviter les erreurs de compilation )
		do { }while(0); 
		Ex : 
			#define QUIT_MSG(A, B) 			\
				do {				\
					exit(EXIT_FAILURE); 	\
				}while(0);
	Le do { }while(X); aura donc la structure présentée dessus
	Les codes de débug seront inserés ainsi dans le code :
		#ifdef DEBUG 
			Do something
		#else
			Dosomething also 
		#endif
	Si le else n'est pas utilisé :
		#ifdef DEBUG
			Do something
		#endif
	
	Les explications de fonction se feront UNIQUEMENT dans les .h
	Toute fonction declarée dans un .c devra être présente avec sa définition dans le .h correspondant.
		
	Les commentaires multi ligne seront de la forme : /* */
	Les commentaires simple ligne seront de la forme //
		Si ils sont placés sur une ligne accompagné de code
		Sinon ils seront de la forme /* */

	Les commentaires présents avant les fonctions ( expliquant le principe des fonctions ) auront la forme suivante :
		/** Fait quelque chose
		 *  %param line : Line number
		 *  %return : -1 if false, 0 otherwise
		 */
		 Et la fonction associée a cette définition :
		 int ma_fonction(int line);

	Les fonctions seront nommées comme suit : 
		type_de_retour nom_de_fonction(type variable);
		type_de_retour nom_de_fonction_bis(type variable, type variable);
	
	

	Les inclusions se feront dans l'ordre suivant :
		#include stdio.h
		#include "fichier.h"

	Les fichiers personnels seront inclus après les fichiers systemes.

	Les fichiers .h contiendront TOUJOURS les instructions suivantes après les entetes :
	
	#ifndef FICHIER_H
	#define FICHIER_H

	puis à la fin du fichier :
	#endif /* FICHIER_H included */

	le _H étant obligatoire pour chaque fichier

	L'incrémentation des variables se fera en post-incrémentation pour un gain de vitesse.
	La plupart des int seront des char, pour un gain de place ( et de vitesse [ minime ] ).

V - Convention d'entête de fichier
----------------------------------

	Exemple d'entête de fichier .c

	// --------------------------------------------------------
	// AUTEUR : REYNAUD Nicolas                                |
	// FICHIER : affichage.c                                   |
	// DATE : 13/03/14                                         |
	//                                                         |
	// - Définition des fonctions de affichage.h               |
	// - pour plus de detaile C.F affichage.h                  |
	// -------------------------------------------------------- 

	Exemple d'entête de fichier .h 

	//----------------------------------------------------------
	// AUTEUR : REYNAUD Nicolas                                 |
	// FICHIER : affiche.h                                      |
	// DATE : 13/03/14                                          |
	//                                                          |
	// - Prototypes des fonctions de affiche.c                  |
	// - Fonction d'affichage du titre d'accueil                |
	// - Fonction d'affichage du menu                           |
	// - Fonction d'affichage du sous menu humain               |
	// - Fonction d'affichage du sous menu pour la difficulté   |
	// De l'IA                                                  |
	//----------------------------------------------------------

