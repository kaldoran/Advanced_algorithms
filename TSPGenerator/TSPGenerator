#! /usr/bin/perl

use strict;
use warnings;
use File::Which;
use Getopt::Long;
use constant NUMBER_MAX_NODE => 1000;
use constant NUMBER_MIN_NODE => 2;
use constant NUMBER_MIN_LINK => 1;
use constant MAX_WEIGHT => 50;
use constant TMP_FILE => "tmp_graph_dot";

#############################################################
#####					VARIABLE						#####
#############################################################

my $number_node = 0;
my $number_link = 0;
my $link_max_weight = 0;
my $visual = 0;
my $all_random = 0;
my $help = 0;
my $check_dot = "";

#############################################################
#####					GET OPTIONS						#####
#############################################################

if ( @ARGV == 0 ) { help(); exit; }                                # Do if before GetOptions cause GetOptions Del options from ARGV #

GetOptions(
    'node=i'    => \$number_node,
    'link=i'     => \$number_link,
    'visual!' => \$visual,
    'help!'     => \$help,
    'random!' => \$all_random,
) or die help();


#############################################################
#####						MAIN						#####
#############################################################

if ( $help ) {
    help();
} else {

                                ##### VALIDATION PART #####
                                
    if ( $all_random ) { 
        $number_node = int(rand(NUMBER_MAX_NODE - 2)) + 2;          # rand(X) : NUMBER_MAX_NODE - 2 Cause rand is between 0 and X - 1; #
        $number_link = int(rand($number_node - 2 )) + 2;            # After we add to to get higher than 0 #
    }

    
    if ( $visual ) { 
        $check_dot = which('dot');                                  # Get value of which [ bash command ] #
        if ( ! (-e $check_dot && -x $check_dot) ) {                 # Test if file exists and if we could use it #
            warn "\n[ ERROR ] : 'Dot' not found for visual\n\t Visual set to no. \n\n";  
            $visual = 0; 
        }
    }
    
    if ( $number_node < NUMBER_MIN_NODE ) { 
        die "\n[ FATAL ERROR ] : $number_node is lower than number minimum of node. \n\t Minimum value is ". NUMBER_MIN_NODE ."\n\n"; 
    }
    
    if ( $number_node > NUMBER_MAX_NODE ) {
        warn "\n[ ERROR ] : $number_node is higher than number max of node\n Number of node set to max [ ". NUMBER_MAX_NODE." ] \n\n";
        $number_node = NUMBER_MAX_NODE;
    }
    
    if ( $number_link > ($number_node - 1) ) { 
        die "\n[ FATAL ERROR ] : Number of link is higher than number of node minus 1\n\n"; 
    }
    
    if ( $number_link < NUMBER_MIN_LINK ) {
        die "\n[ FATAL ERROR ] : Number of link is lower than minimum. \n\t Minimum value is ". NUMBER_MIN_LINK ."\n\n";
    }
    
                            ##### END VALIDATION #####
    
    print "[ INFO ] : $number_node Nodes -- Minimum $number_link Link between nodes \n\n";
    sleep(2);
                            ##### CREAT GRAPH #####
                            
    open(FILE, ">".TMP_FILE ) or die "[ FATAL ERROR ] : $!\n";
    print (FILE "graph G {\n");
    
    for ( my $i = 0; $i < $number_node ; $i++ ) {
    
        my @link_array = qw();
        my @weight_link_array = qw();
        
        for ( my $j = 0; $j < $number_link; $j++ ) {
        
            my $weight;
            my $bridge;
            
            do {
                $bridge = int(rand($number_node - 1));
            }while( $bridge == $i || grep( /^$bridge$/, @link_array));
            
            push (@link_array, $bridge);
            $weight = int(rand(MAX_WEIGHT));
            push (@weight_link_array, $weight);
            
            print "[ INFO ] : $i -- $bridge [ $weight ]\n";
            
            if ( $visual ) {
                print (FILE "\"$i\" -- \"$bridge\" [label=\"$weight\"]\n");
            }
        }    
    }
    print (FILE "}\n");
    close(FILE);
    
    if ($visual) {
        print "[ INFO ] : Creating the graph with dot\n";
        system("$check_dot -Tpng ".TMP_FILE." -o output.png");
    }
    
    unlink("tmp_graph_dot");
    
}


#############################################################
#####			            HELP				        #####
#############################################################

sub help {
    system("clear");
    print "\tTSPGenerator - By Reynaud Nicolas\n\t=================================\n\n";
    print "Usage : ./TSPGenerator --node 10 --link 5 [--visual]\n";
    print "Or : ./TSPGenerator -r [--visual]\n";
    print "\n--visual : Short -v\n";
    print "--node : Short -n [ Max Value :".NUMBER_MAX_NODE.", Min Value :". NUMBER_MIN_NODE ." ] \n";
    print "--link : Short -l\n\n";
    print "NB : -h and -h got higher priority than others.\n\n";
}