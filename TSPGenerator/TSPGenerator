#! /usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use constant NUMBER_MAX_NODE => 1000;
use constant NUMBER_MIN_NODE => 2;
use constant NUMBER_MIN_LINK => 1;
use constant MAX_WEIGHT => 50;
use constant TMP_FILE => "tmp_graph_dot";
use Time::HiRes;

#############################################################
#####					VARIABLE						#####
#############################################################


## Variable de configuration des options

my $number_node = 0;
my $number_link = 0;
my $link_max_weight = 0;
my $visual = 0;
my $all_random = 0;
my $help = 0;
my $check_dot = "";
my $complet = 1;
my $quiet = 0;
my $seed = 0;

## Variable pour le programme

my @All_link = qw();
my @All_weight = qw();

#############################################################
#####					GET OPTIONS						#####
#############################################################

if ( @ARGV == 0 ) { help(); exit; }                                # Do if before GetOptions cause GetOptions Del options from ARGV #

GetOptions(
    'n|node=i'   => \$number_node,
    'l|link=i'   => \$number_link,
    'v|visual!'  => \$visual,
	'c|Nocomplet!' => \$complet,
	'q|quiet!'   => \$quiet,
    'h|help!'    => \$help,
    'r|random!'  => \$all_random,
	's|seed=i'   => \$seed
) or die help();


#############################################################
#####						MAIN						#####
#############################################################

$| = 1;
if ( $help ) {
    help();
} else {
	my $graine = 0;
	if ( $seed != 0 ) { $graine = srand($seed); }
	else              { $graine = srand(time ^ $$); }
	print ("[ INFO ] : Seed de generation : $graine\n");

    my $link_size = 0;

                                ##### VALIDATION PART #####
                                
    if ( $all_random ) { 
        $number_node = int(rand(NUMBER_MAX_NODE - 2)) + 2;     # rand(X) : NUMBER_MAX_NODE - 2 Cause rand is between 0 and X - 1; #
   		$number_link = int(rand($number_node - 1)) + 1;        # After we add to to get higher than 0 #
   }

   if ( $complet ) {
		$number_link = $number_node;						   # due to line 116 condition #
   }

    
    if ( $visual ) { 
        $check_dot = `which dot`;                             # Get value of which [ bash command ] #
		chomp($check_dot);
		if ( ! ( -e $check_dot && -x $check_dot) ) {             # Test if file exists and if we could use it #
            warn "\n[ ERROR ] : 'Dot' not found for visual\n\t Visual set to no. \n\n";  
            $visual = 0; 
        }
    }
    
    if ( $number_node < NUMBER_MIN_NODE ) { 
        die "\n[ FATAL ERROR ] : $number_node is lower than number minimum of node. \n\t Minimum value is ". NUMBER_MIN_NODE ."\n\n"; 
    }
    
    if ( $number_node > NUMBER_MAX_NODE ) {
        warn "\n[ ERROR ] : $number_node is higher than number max of node\n Number of node set to max [ ". NUMBER_MAX_NODE." ] \n\n";
        $number_node = NUMBER_MAX_NODE;
    }
   
   	if ( !$complet ) {
    	if ( $number_link > ($number_node - 1) ) { 
        	die "\n[ FATAL ERROR ] : Number of link is higher than number of node minus 1\n\n"; 
    	}
    
    	if ( $number_link < NUMBER_MIN_LINK ) {
        	die "\n[ FATAL ERROR ] : Number of link is lower than minimum. \n\t Minimum value is ". NUMBER_MIN_LINK ."\n\n";
   		}
	}
    
                            ##### END VALIDATION #####
    
    print "[ INFO ] : $number_node Nodes -- Minimum $number_link Link between nodes \n\n";
    
                            ##### CREAT GRAPH #####
          
    if ( $visual )  {            
        open(FILE, ">".TMP_FILE ) or die "[ FATAL ERROR ] : $!\n";
        print (FILE "graph G {\n");
    }
    
	open(OUTPUT, ">graph$number_node.graph" ) or die "[ FATAL ERROR ] : $!\n";
	print (OUTPUT "\$$number_node\$\n");

    for ( my $i = 0; $i < $number_node ; $i++ ) {
        my @empty = qw();

		if ( $quiet ) { print STDOUT "*"; }

        push (@{$All_link[$i]}, @empty);
        push (@{$All_weight[$i]}, @empty);

        print "***** Node : $i\n" if ( !$quiet ) ;
        for ( my $j = 0; $j < $number_link; $j++ ) {
            next if ( $i == $j );										# Cant link a node to himself #
            last if ( scalar(@{$All_link[$i]}) >= $number_link);		# All add been generated #
			
			my $weight;
            my $bridge;
            if ( !$complet ) {
            	do {
                	$bridge = int(rand($number_node));                  # value of $number_node is not include in rand range #
           	 	}while( grep (/^$i/, @{$All_link[$bridge]}) || $bridge == $i );
			} else {
				$bridge = $j;
				if ( grep( /^$i/, @{$All_link[$bridge]}) ) {
					print "\t[ INFO ] : $i -- $bridge already exist\n" if (! $quiet);
					next;
				}
			}

            push (@{$All_link[$i]}, $bridge);
            push (@{$All_link[$bridge]}, $i);
            $weight = int(rand(MAX_WEIGHT));

            push (@{$All_weight[$i]}, $weight);
            push (@{$All_weight[$bridge]}, $weight);

            print "\t[ INFO ] : $i -- $bridge [ $weight ]\n" if (!$quiet);
            if ( $visual ) {
                print (FILE "\"$i\" -- \"$bridge\" [label=\"$weight\"]\n");
            }
        }   
		
		print "*****\n" if ( !$quiet);
    }

	#Print solution into a file
	print "\n[ INFO ] : Create output file\n";
	for ( my $i = 0; $i < $number_node; $i++) {
		my $len_link = scalar(@{$All_link[$i]});
		print (OUTPUT "-$i\@$len_link\n");

		for ( my $j = 0; $j < $len_link; $j++ ) {
			print (OUTPUT "$All_link[$i][$j]#$All_weight[$i][$j]\n");
		}
	}
	#end print
	
	close(OUTPUT);

    if ( $visual ) {
        print (FILE "}\n");
        close(FILE);

        print "[ INFO ] : Creating the graph with dot\n";
        system("$check_dot -Tpng ".TMP_FILE." -o output.png");

        unlink("tmp_graph_dot");
    }

    # Count number of link for check property on graph #
	if ( !$complet ) {
    	for( my $i = 0; $i < $number_node ; $i++ ) {
       		$link_size += scalar(@{$All_link[$i]});
    	}

    	if ( ($link_size / 2) < ( $number_node - 1 )) {                # Each edge is count 2 times so we divid by 2 #
        	die "[ FATAL ERROR ] : Generated graph is not connexe\n\t Visual add been created ( if asked ) check it out for more information.\n\n";
    	}   
	}

	print ("[ INFO ] : Recall seed : $graine\n\n");
}


#############################################################
#####			            HELP				        #####
#############################################################

sub help {
    system("clear");
    print "\tTSPGenerator - By Reynaud Nicolas\n\t=================================\n\n";
    print "Usage : ./TSPGenerator -c --node 10 [--visual] [--quiet]\n";
    print "Or : ./TSPGenerator --random [--visual]\n";
    print "\n--visual or -v : Toggle or not the edition of Graph\n";
    print "--node or -n : Number of node [ Max Value :".NUMBER_MAX_NODE.", Min Value :". NUMBER_MIN_NODE ." ] \n";
    print "--link or -l : Minimum number of edge\n";
	print "--seed or -s : Seed to generate the graph\n";
    print "--random or -r : Toggle or not random graphs\n";
	print "--Nocomplet or -c : disable complet graph\n\n";
	print "--quit or -q : Toggle if the programme is quiet or not (i.e. if he is in verbose mode or not)";
    print "NB : -h and -r and -c  got higher priority than others.\n\n";
}
